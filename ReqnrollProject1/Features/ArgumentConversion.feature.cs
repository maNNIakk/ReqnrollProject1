// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollProject1.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ArgumentConversionFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Argument Conversion", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "ArgumentConversion.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Io.Cucumber.Messages.Types.Source SourceFunc()
        {
            return new global::Io.Cucumber.Messages.Types.Source("Features/ArgumentConversion.feature", @"Feature: Argument Conversion

Scenario: Customer can add non-expired offer code to the basket
Given I have offer code 'CODE1' which expires in '3 days time'
When I add offer code 'CODE1' to the basket
Then the offer code is valid

Scenario: Customer can add expired offer code to the basket
Given I have offer code 'CODE1' which expires '7 days ago'
When I add offer code 'CODE1' to the basket
Then the offer code is invalid

Scenario: Customer Visit Challenge - First
Given I am the customer N°1 to view the offer page
Then I am given a special discount

Scenario: Customer Visit Chalenge  - Second
Given I am the customer N°2 to view the offer page
Then I am not given a special discount

Scenario: Customer Visit Chalenge - Forty 
Given I am the customer N°4 to view the offer page
Then I am not given a special discount

Scenario: Customer Visit Chalenge - Zero or Negative 
Given I am the customer N°0 to view the offer page
Then an IndexOutOfRangeException is thrown", global::Io.Cucumber.Messages.Types.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_PLAIN);
        }
        
        private static global::Io.Cucumber.Messages.Types.GherkinDocument GherkinDocumentFunc()
        {
            return new global::Io.Cucumber.Messages.Types.GherkinDocument("Features/ArgumentConversion.feature", new global::Io.Cucumber.Messages.Types.Feature(new global::Io.Cucumber.Messages.Types.Location(1, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "en-US", "Feature", "Argument Conversion", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.FeatureChild>(new global::Io.Cucumber.Messages.Types.FeatureChild[] {
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(3, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "Customer can add non-expired offer code to the basket", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(4, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I have offer code \'CODE1\' which expires in \'3 days time\'", null, null, "431e13517a55e3568afee2ef9ddba3fa"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(5, new System.Nullable<long>(1)), "When ", global::Io.Cucumber.Messages.Types.StepKeywordType.ACTION, "I add offer code \'CODE1\' to the basket", null, null, "c81368f86958e451bfc25e58f42fb99f"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(6, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "the offer code is valid", null, null, "487a815678f503599e8bb03f9f8e0f20")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "ce319be94801165c8994810d59e67880")),
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(8, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "Customer can add expired offer code to the basket", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(9, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I have offer code \'CODE1\' which expires \'7 days ago\'", null, null, "b185fb220fc208579a0682aa59d730a0"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(1)), "When ", global::Io.Cucumber.Messages.Types.StepKeywordType.ACTION, "I add offer code \'CODE1\' to the basket", null, null, "b51f9c0ed82aeb5c8ce55481e94aff09"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(11, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "the offer code is invalid", null, null, "a4eda8c90de59950af36e0c59600f8b7")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "c0366e90f05b4a5bb1714715a26960fa")),
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(13, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "Customer Visit Challenge - First", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(14, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I am the customer N°1 to view the offer page", null, null, "0ed3b5a538c1565c9fc101fd4f62b2da"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(15, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "I am given a special discount", null, null, "e8953cd002ce1958bc227c055bfeade8")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "dd86cda1e4830d548202074bcd3c9566")),
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(17, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "Customer Visit Chalenge  - Second", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(18, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I am the customer N°2 to view the offer page", null, null, "f057a2ad4a492a5883c307bd264ce36c"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(19, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "I am not given a special discount", null, null, "5df25baba847f257bf0e8b0c82b4cbf7")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "41b0e33f19cb915fb4bd06ac745229fc")),
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "Customer Visit Chalenge - Forty", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(22, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I am the customer N°4 to view the offer page", null, null, "61546348e6cb0351b8f08468f50c28e7"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(23, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "I am not given a special discount", null, null, "f5f9d9f522db68599176c140765b09c9")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "15a4c12bc6fea35292551b1b65a11ce1")),
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(25, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "Customer Visit Chalenge - Zero or Negative", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(26, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I am the customer N°0 to view the offer page", null, null, "c58bee9e8d9e5559abbbae2a323c00b4"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(27, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "an IndexOutOfRangeException is thrown", null, null, "cdc459b13e25505eae2f76b801003f30")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "715c0c912ece155caa03cc23c61cfe4d"))})), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Comment>(new global::Io.Cucumber.Messages.Types.Comment[0]));
        }
        
        private static global::System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle> PicklesFunc()
        {
            return new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Pickle>(new global::Io.Cucumber.Messages.Types.Pickle[] {
                        new global::Io.Cucumber.Messages.Types.Pickle("a01d6876b7fb1857ac64b1faebabe22d", "Features/ArgumentConversion.feature", "Customer can add non-expired offer code to the basket", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "431e13517a55e3568afee2ef9ddba3fa"}), "e52062e77fc18a5e967eeca73c836e6c", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I have offer code \'CODE1\' which expires in \'3 days time\'"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "c81368f86958e451bfc25e58f42fb99f"}), "f13c08c473b22f5aac043ceaca5e1dea", global::Io.Cucumber.Messages.Types.PickleStepType.ACTION, "I add offer code \'CODE1\' to the basket"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "487a815678f503599e8bb03f9f8e0f20"}), "8268f20e3c64575b92e595f1df499bf0", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "the offer code is valid")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "ce319be94801165c8994810d59e67880"})),
                        new global::Io.Cucumber.Messages.Types.Pickle("0153ce97a571cf54a2e9dc60f61961c8", "Features/ArgumentConversion.feature", "Customer can add expired offer code to the basket", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "b185fb220fc208579a0682aa59d730a0"}), "c5c64d70edd42d5e9b8779d115835b19", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I have offer code \'CODE1\' which expires \'7 days ago\'"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "b51f9c0ed82aeb5c8ce55481e94aff09"}), "ef73e3b04533ea51b68c08acc7c8716c", global::Io.Cucumber.Messages.Types.PickleStepType.ACTION, "I add offer code \'CODE1\' to the basket"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "a4eda8c90de59950af36e0c59600f8b7"}), "7dc896034585b2519425f934dac54f5f", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "the offer code is invalid")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "c0366e90f05b4a5bb1714715a26960fa"})),
                        new global::Io.Cucumber.Messages.Types.Pickle("b5f4766e99b81d5f8c94d0a4fc20ceb1", "Features/ArgumentConversion.feature", "Customer Visit Challenge - First", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "0ed3b5a538c1565c9fc101fd4f62b2da"}), "ce7e8db239f4825eb5082120c4c3e3ba", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I am the customer N°1 to view the offer page"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "e8953cd002ce1958bc227c055bfeade8"}), "7bfd1cccf1571557bbce6f984d243aba", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "I am given a special discount")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "dd86cda1e4830d548202074bcd3c9566"})),
                        new global::Io.Cucumber.Messages.Types.Pickle("24ded41ea297835e93a6f599fcae046c", "Features/ArgumentConversion.feature", "Customer Visit Chalenge  - Second", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "f057a2ad4a492a5883c307bd264ce36c"}), "6898a627cd4e2751b0acd07f782ee889", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I am the customer N°2 to view the offer page"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "5df25baba847f257bf0e8b0c82b4cbf7"}), "2004ac27543ddb53abd368aa21caeb7b", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "I am not given a special discount")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "41b0e33f19cb915fb4bd06ac745229fc"})),
                        new global::Io.Cucumber.Messages.Types.Pickle("9b61faae5e4adf59b21c3a7890180c3b", "Features/ArgumentConversion.feature", "Customer Visit Chalenge - Forty", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "61546348e6cb0351b8f08468f50c28e7"}), "dc044f1ea83faf5db7aea67443278af4", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I am the customer N°4 to view the offer page"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "f5f9d9f522db68599176c140765b09c9"}), "d6c4f0ef9ecb8d549715af6ec1afbd22", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "I am not given a special discount")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "15a4c12bc6fea35292551b1b65a11ce1"})),
                        new global::Io.Cucumber.Messages.Types.Pickle("6ae2c7e5e374895d804a54223734e9bf", "Features/ArgumentConversion.feature", "Customer Visit Chalenge - Zero or Negative", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "c58bee9e8d9e5559abbbae2a323c00b4"}), "7b7b494532838f59be910d9b23ec3fe6", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I am the customer N°0 to view the offer page"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "cdc459b13e25505eae2f76b801003f30"}), "672a05b8b4c1125ba8eee85b97068751", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "an IndexOutOfRangeException is thrown")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "715c0c912ece155caa03cc23c61cfe4d"}))});
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages(new global::System.Func<Io.Cucumber.Messages.Types.Source>(ArgumentConversionFeature.SourceFunc), new global::System.Func<Io.Cucumber.Messages.Types.GherkinDocument>(ArgumentConversionFeature.GherkinDocumentFunc), new global::System.Func<System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle>>(ArgumentConversionFeature.PicklesFunc));
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Customer can add non-expired offer code to the basket")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Customer can add non-expired offer code to the basket")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Argument Conversion")]
        public async global::System.Threading.Tasks.Task CustomerCanAddNon_ExpiredOfferCodeToTheBasket()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Customer can add non-expired offer code to the basket", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 3
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await testRunner.GivenAsync("I have offer code \'CODE1\' which expires in \'3 days time\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
await testRunner.WhenAsync("I add offer code \'CODE1\' to the basket", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 6
await testRunner.ThenAsync("the offer code is valid", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Customer can add expired offer code to the basket")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Customer can add expired offer code to the basket")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Argument Conversion")]
        public async global::System.Threading.Tasks.Task CustomerCanAddExpiredOfferCodeToTheBasket()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Customer can add expired offer code to the basket", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 8
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
await testRunner.GivenAsync("I have offer code \'CODE1\' which expires \'7 days ago\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
await testRunner.WhenAsync("I add offer code \'CODE1\' to the basket", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
await testRunner.ThenAsync("the offer code is invalid", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Customer Visit Challenge - First")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Customer Visit Challenge - First")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Argument Conversion")]
        public async global::System.Threading.Tasks.Task CustomerVisitChallenge_First()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Customer Visit Challenge - First", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 13
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 14
await testRunner.GivenAsync("I am the customer N°1 to view the offer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 15
await testRunner.ThenAsync("I am given a special discount", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Customer Visit Chalenge  - Second")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Customer Visit Chalenge  - Second")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Argument Conversion")]
        public async global::System.Threading.Tasks.Task CustomerVisitChalenge_Second()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Customer Visit Chalenge  - Second", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 17
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
await testRunner.GivenAsync("I am the customer N°2 to view the offer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
await testRunner.ThenAsync("I am not given a special discount", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Customer Visit Chalenge - Forty")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Customer Visit Chalenge - Forty")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Argument Conversion")]
        public async global::System.Threading.Tasks.Task CustomerVisitChalenge_Forty()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Customer Visit Chalenge - Forty", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 21
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
await testRunner.GivenAsync("I am the customer N°4 to view the offer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
await testRunner.ThenAsync("I am not given a special discount", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Customer Visit Chalenge - Zero or Negative")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Customer Visit Chalenge - Zero or Negative")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Argument Conversion")]
        public async global::System.Threading.Tasks.Task CustomerVisitChalenge_ZeroOrNegative()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Customer Visit Chalenge - Zero or Negative", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 25
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
await testRunner.GivenAsync("I am the customer N°0 to view the offer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
await testRunner.ThenAsync("an IndexOutOfRangeException is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
