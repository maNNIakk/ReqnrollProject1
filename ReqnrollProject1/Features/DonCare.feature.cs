// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollProject1.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CustomRetrieversFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Custom Retrievers", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "DonCare.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Io.Cucumber.Messages.Types.Source SourceFunc()
        {
            return new global::Io.Cucumber.Messages.Types.Source("Features/DonCare.feature", @"Feature: Custom Retrievers

Scenario: I Dont Know Yet
Given I have the following clothes size data
| Name           | Size |
| Test Product 1 | XXL  |
| Test Product 2 | L    |
| Test Product 3 | S    |
Then the clothing data is translated to
| Name           | Size            |
| Test Product 1 | ExtraExtraLarge |
| Test Product 2 | Large           |
| Test Product 3 | Small           |
", global::Io.Cucumber.Messages.Types.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_PLAIN);
        }
        
        private static global::Io.Cucumber.Messages.Types.GherkinDocument GherkinDocumentFunc()
        {
            return new global::Io.Cucumber.Messages.Types.GherkinDocument("Features/DonCare.feature", new global::Io.Cucumber.Messages.Types.Feature(new global::Io.Cucumber.Messages.Types.Location(1, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "en-US", "Feature", "Custom Retrievers", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.FeatureChild>(new global::Io.Cucumber.Messages.Types.FeatureChild[] {
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(3, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario", "I Dont Know Yet", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(4, new System.Nullable<long>(1)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I have the following clothes size data", null, new global::Io.Cucumber.Messages.Types.DataTable(new global::Io.Cucumber.Messages.Types.Location(5, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableRow>(new global::Io.Cucumber.Messages.Types.TableRow[] {
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(5, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(5, new System.Nullable<long>(3)), "Name"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(5, new System.Nullable<long>(20)), "Size")}), "14ae8572a1624c55a8b70ab1ca1f3dc5"),
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(6, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(6, new System.Nullable<long>(3)), "Test Product 1"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(6, new System.Nullable<long>(20)), "XXL")}), "5a9d1dbfe385055eacc1d2da71afa94a"),
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(7, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(7, new System.Nullable<long>(3)), "Test Product 2"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(7, new System.Nullable<long>(20)), "L")}), "d3799ce3d300065c808b28a0c8bf3166"),
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(8, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(8, new System.Nullable<long>(3)), "Test Product 3"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(8, new System.Nullable<long>(20)), "S")}), "f8b6c9b472da805da8aac297a762588d")})), "47a64b99a149415eb66b155b7ba42145"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(9, new System.Nullable<long>(1)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "the clothing data is translated to", null, new global::Io.Cucumber.Messages.Types.DataTable(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableRow>(new global::Io.Cucumber.Messages.Types.TableRow[] {
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(3)), "Name"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(20)), "Size")}), "712d2e49a3b2ab548d1df63b4191a4fe"),
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(11, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(11, new System.Nullable<long>(3)), "Test Product 1"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(11, new System.Nullable<long>(20)), "ExtraExtraLarge")}), "6d1490c8fc558a5d9b91f642db8f8c28"),
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(12, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(12, new System.Nullable<long>(3)), "Test Product 2"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(12, new System.Nullable<long>(20)), "Large")}), "6ebcbe58635fd15a91e02ea6bfeb6bc0"),
                                                                        new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(13, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(13, new System.Nullable<long>(3)), "Test Product 3"),
                                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(13, new System.Nullable<long>(20)), "Small")}), "e6b46c1825e87552975fe813eb8afc8e")})), "c87104bb90874f5ba4dae4e8a4e3e349")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "193af6795d5b5e5baa980845e2a8cdec"))})), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Comment>(new global::Io.Cucumber.Messages.Types.Comment[0]));
        }
        
        private static global::System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle> PicklesFunc()
        {
            return new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Pickle>(new global::Io.Cucumber.Messages.Types.Pickle[] {
                        new global::Io.Cucumber.Messages.Types.Pickle("b53c0a33e113b655a42f15469cf4bd09", "Features/DonCare.feature", "I Dont Know Yet", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(new global::Io.Cucumber.Messages.Types.PickleStepArgument(null, new global::Io.Cucumber.Messages.Types.PickleTable(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableRow>(new global::Io.Cucumber.Messages.Types.PickleTableRow[] {
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Name"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Size")})),
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Test Product 1"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("XXL")})),
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Test Product 2"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("L")})),
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Test Product 3"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("S")}))}))), new System.Collections.Generic.List<string>(new string[] {
                                                        "47a64b99a149415eb66b155b7ba42145"}), "7e793aba07fcaf54ad3feb861b20a128", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I have the following clothes size data"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(new global::Io.Cucumber.Messages.Types.PickleStepArgument(null, new global::Io.Cucumber.Messages.Types.PickleTable(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableRow>(new global::Io.Cucumber.Messages.Types.PickleTableRow[] {
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Name"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Size")})),
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Test Product 1"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("ExtraExtraLarge")})),
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Test Product 2"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Large")})),
                                                                new global::Io.Cucumber.Messages.Types.PickleTableRow(new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTableCell>(new global::Io.Cucumber.Messages.Types.PickleTableCell[] {
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Test Product 3"),
                                                                                new global::Io.Cucumber.Messages.Types.PickleTableCell("Small")}))}))), new System.Collections.Generic.List<string>(new string[] {
                                                        "c87104bb90874f5ba4dae4e8a4e3e349"}), "c8d1e6d40793e156b268a2da3fb283b5", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "the clothing data is translated to")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "193af6795d5b5e5baa980845e2a8cdec"}))});
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages(new global::System.Func<Io.Cucumber.Messages.Types.Source>(CustomRetrieversFeature.SourceFunc), new global::System.Func<Io.Cucumber.Messages.Types.GherkinDocument>(CustomRetrieversFeature.GherkinDocumentFunc), new global::System.Func<System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle>>(CustomRetrieversFeature.PicklesFunc));
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("I Dont Know Yet")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I Dont Know Yet")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Custom Retrievers")]
        public async global::System.Threading.Tasks.Task IDontKnowYet()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("I Dont Know Yet", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 3
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Size"});
                table8.AddRow(new string[] {
                            "Test Product 1",
                            "XXL"});
                table8.AddRow(new string[] {
                            "Test Product 2",
                            "L"});
                table8.AddRow(new string[] {
                            "Test Product 3",
                            "S"});
#line 4
await testRunner.GivenAsync("I have the following clothes size data", ((string)(null)), table8, "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Size"});
                table9.AddRow(new string[] {
                            "Test Product 1",
                            "ExtraExtraLarge"});
                table9.AddRow(new string[] {
                            "Test Product 2",
                            "Large"});
                table9.AddRow(new string[] {
                            "Test Product 3",
                            "Small"});
#line 9
await testRunner.ThenAsync("the clothing data is translated to", ((string)(null)), table9, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
